<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Auth_Code" elementType="Argument">
            <stringProp name="Argument.name">Auth_Code</stringProp>
            <stringProp name="Argument.value">${__P(Auth_Code,1952)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Checkout" elementType="Argument">
            <stringProp name="Argument.name">Checkout</stringProp>
            <stringProp name="Argument.value">${__P(Checkout, Add Http(s) here )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Constant_Timer_ms" elementType="Argument">
            <stringProp name="Argument.name">Constant_Timer_ms</stringProp>
            <stringProp name="Argument.value">${__P(Constant_Timer_ms, 1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PhantomJS_Browsing_Users" elementType="Argument">
            <stringProp name="Argument.name">PhantomJS_Browsing_Users</stringProp>
            <stringProp name="Argument.value">${__P(PhantomJS_Browsing_Users,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PhantomJS_Ramp_Up_Period_sec" elementType="Argument">
            <stringProp name="Argument.name">PhantomJS_Ramp_Up_Period_sec</stringProp>
            <stringProp name="Argument.value">${__P(PhantomJS_Ramp_Up_Period_sec,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PhantomJS_Thread_Loop_Count" elementType="Argument">
            <stringProp name="Argument.name">PhantomJS_Thread_Loop_Count</stringProp>
            <stringProp name="Argument.value">${__P(PhantomJS_Thread_Loop_Count, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="    " elementType="Argument">
            <stringProp name="Argument.name">    </stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Add_To_Cart_Product_Page" elementType="Argument">
            <stringProp name="Argument.name">Add_To_Cart_Product_Page</stringProp>
            <stringProp name="Argument.value">${__P(Add_To_Cart_Product_Page, Add Http(s) here )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Add_To_Cart_Press_Xpath" elementType="Argument">
            <stringProp name="Argument.name">Add_To_Cart_Press_Xpath</stringProp>
            <stringProp name="Argument.value">${__P(Add_To_Cart_Press_Xpath, Add Xpath here)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="    " elementType="Argument">
            <stringProp name="Argument.name">    </stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PhantomJS_Driver" elementType="Argument">
            <stringProp name="Argument.name">PhantomJS_Driver</stringProp>
            <stringProp name="Argument.value">${__P(PhantomJS_Driver,/usr/local/bin/phantomjs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Enviroment" elementType="Argument">
            <stringProp name="Argument.name">Enviroment</stringProp>
            <stringProp name="Argument.value">${__P(Enviroment,https://stage.lyko.se)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${PhantomJS_Thread_Loop_Count}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${PhantomJS_Browsing_Users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${PhantomJS_Ramp_Up_Period_sec}</stringProp>
        <longProp name="ThreadGroup.start_time">1510653546000</longProp>
        <longProp name="ThreadGroup.end_time">1510653546000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig guiclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfigGui" testclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig" testname="bzm - PhantomJS Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_path">${PhantomJS_Driver}</stringProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_cli_args"></stringProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_ghostdriver_cli_args"></stringProp>
        </com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)//WebDriver classes
var wait = new pkg.WebDriverWait(WDS.browser, 60);
var waitButton = new pkg.WebDriverWait(WDS.browser, 30);

var defaultSleepTime = 2000;

//Helper functions
function randomIntFromInterval(min,max)
{
    return Math.floor(Math.random()*(max-min+1)+min);
}

function clickAtElementInList(listOfElements, index) {
    for (i = 0; i &lt; listOfElements.length; i++) {
         if(i === index) {
             listOfElements[i].click();
             java.lang.Thread.sleep(defaultSleepTime); 
         }
    }
}

function goToRandomPage() {
    
     try {
        var menuButton =  waitButton.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;main-menu-button&apos;)));
        menuButton.click();
    
        var randomIndexTopMenu = randomIntFromInterval(0,10);
        java.lang.Thread.sleep(defaultSleepTime*2); 
        var topLevelMenuItems = WDS.browser.findElements(pkg.By.className(&apos;top-menu-item&apos;));
        
        clickAtElementInList(topLevelMenuItems, randomIndexTopMenu);
        java.lang.Thread.sleep(defaultSleepTime*2); 
        
        var randomIndexChildMenu = randomIntFromInterval(0,10);
        var childLevelMenuItems = WDS.browser.findElements(pkg.By.className(&apos;child-menu-item&apos;));
        clickAtElementInList(childLevelMenuItems, randomIndexTopMenu);
        
        java.lang.Thread.sleep(defaultSleepTime*2); 
        WDS.log.info(&quot;Go to page&quot;);
    }catch(e) {
         WDS.log.error(&quot;Go to page failed for: &quot; + WDS.browser.getCurrentUrl(), e); 
    }
}

function closeInstagramModal() {
    var modalButton = wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;dt-popup-actions&apos;)));
    modalButton.click(); 
    WDS.log.info(&quot;Close instagram modal&quot;);
}

function addToCart() {
   try {
   var addToCartButton = waitButton.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.className(&apos;add-to-cart&apos;)));
   addToCartButton.click();
   java.lang.Thread.sleep(defaultSleepTime); 
   WDS.log.info(&quot;Add to cart&quot;);
   } catch (e) {
        WDS.log.error(&quot;Add to cart failed:&quot;, e); 
   }
}

function addRecommendationToCart() {
   try {
   WDS.log.info(&quot;Add recommendation to cart&quot;);
   var recommendationArea = waitButton.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.className(&apos;_3hYnRj&apos;)));
   WDS.log.info(&quot;Random recommendation index: &quot; + randomIndex);
   var randomIndex= randomIntFromInterval(0,5);
   var addRecommendedToCartButton = recommendationArea.findElements(pkg.By.className(&apos;add-to-cart&apos;))[randomIndex];
   addRecommendedToCartButton.click();
   java.lang.Thread.sleep(defaultSleepTime); 
   } catch (e) {
        WDS.log.error(&quot;Add to cart failed:&quot;, e); 
   }
}

function goToRandomProductPage() {
     try {
        var randomIndex= randomIntFromInterval(1,10);
        var firstProductLink = waitButton.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.className(&apos;link-product-page&apos;)));
        WDS.log.info(&quot;Random product page index: &quot; + randomIndex);
        var productLinks = WDS.browser.findElements(pkg.By.className(&apos;link-product-page&apos;));
        clickAtElementInList(productLinks, randomIndex);
        java.lang.Thread.sleep(defaultSleepTime*2); 
        WDS.log.info(&quot;Go to product page&quot;);
     } catch (e) {
        WDS.log.error(&quot;Go to product page failed: &quot; + WDS.browser.getCurrentUrl(), e); 
     }
}

function goToCheckoutPage() {
    try {
        var miniCartButton =  wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.className(&apos;mini-cart-button&apos;)));
        miniCartButton.click();
        java.lang.Thread.sleep(defaultSleepTime*2); 
        var checkoutLink = wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.className(&apos;link-checkout-page&apos;)));
        checkoutLink.click();
        java.lang.Thread.sleep(defaultSleepTime*2);
        WDS.log.info(&quot;Go to checkout page&quot;);
    } catch (e) {
        WDS.log.error(&quot;Go to checkout page failed:&quot;, e);
    }
}

function searchForProduct() {
    try {
         var productCode = waitButton.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(&quot;div [data-buyable-variant-code]&quot;))).getAttribute(&quot;data-buyable-variant-code&quot;);
         var search = WDS.browser.findElement(pkg.By.name(&apos;q&apos;)); 
         search.sendKeys(productCode);   
         java.lang.Thread.sleep(defaultSleepTime*2);
         WDS.log.info(&quot;Search for product&quot;); 
    } catch (e) {
        WDS.log.error(&quot;Search for product failed: &quot;, e); 
    }
}

function fillInCheckoutInformation() {
    
    try {
        // Address Fields
        var Email = wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&quot;email&quot;))); 
        Email.sendKeys(&quot;andreas.olofsson92@gmail.com&quot;);
        
        var Email = WDS.browser.findElement(pkg.By.name(&quot;personal-number&quot;)); 
        Email.sendKeys(&quot;921312321&quot;);
        
        // Payment methods
        var paymentMethods = WDS.browser.findElements(pkg.By.className(&apos;select-payment-method&apos;));
        clickAtElementInList(paymentMethods, 1);
        
         java.lang.Thread.sleep(defaultSleepTime*2); 
        var shippingMethods = WDS.browser.findElements(pkg.By.className(&apos;select-shipping-method&apos;));
        clickAtElementInList(shippingMethods, 1);
        
        var editAddressButton =  WDS.browser.findElement(pkg.By.id(&apos;edit-address&apos;));
        editAddressButton.click();
        
        java.lang.Thread.sleep(defaultSleepTime*2); 
        var FirstName = wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&quot;fname&quot;)));
        FirstName.sendKeys(&quot;Testperson&quot;);
        
        var LastName = WDS.browser.findElement(pkg.By.name(&apos;lname&apos;)); 
        LastName.sendKeys(&quot;Testaren&quot;);
        
        var adress = WDS.browser.findElement(pkg.By.name(&apos;address&apos;)); 
        adress.sendKeys(&quot;Grisslevägen 11&quot;);
         java.lang.Thread.sleep(defaultSleepTime*2); 
        
        var PostalCode = WDS.browser.findElement(pkg.By.name(&quot;zip&quot;)); 
        PostalCode.sendKeys(&quot;227 32&quot;);
        
        java.lang.Thread.sleep(defaultSleepTime*2); 
        var city = WDS.browser.findElement(pkg.By.name(&quot;city&quot;)); 
        city.sendKeys(&quot;Lund&quot;);   
        WDS.log.info(&quot;Fill in checkout information&quot;);
    } catch(e) {
        WDS.log.error(&quot;Fill in checkout information failed:&quot;, e); 
    }

}

function addQuantityRandomCheckoutPage() {

    try {
        var addQuantityButtons = WDS.browser.findElements(pkg.By.className(&apos;add-quantity&apos;));
        
        for (i = 0; i &lt; addQuantityButtons.length; i++) {
            var random_boolean = Math.random() &gt;= 0.5;
            if(random_boolean) {
                addQuantityButtons[i].click();
                 java.lang.Thread.sleep(defaultSleepTime* 1.5);
                if(i &lt;= 1) {  
                   addQuantityButtons[i].click();
                   java.lang.Thread.sleep(defaultSleepTime* 1.5);
                }
            }
        }   
        
        WDS.log.info(&quot;Add quantity to products&quot;);
    }catch (e) {
        WDS.log.error(&quot;Add quantity to products failed:&quot;, e); 
    }
}

function removeQuantityRandomCheckoutPage() {
    try {
        var removeQuantityButtons = WDS.browser.findElements(pkg.By.className(&apos;remove-quantity&apos;));
        
        for (i = 0; i &lt; removeQuantityButtons.length; i++) {
            var random_boolean = Math.random() &gt;= 0.5;
            if(random_boolean) {
                removeQuantityButtons[i].click();
                java.lang.Thread.sleep(defaultSleepTime * 1.5);
            }
        }   
        WDS.log.info(&quot;Remove quantity to products&quot;);
    }catch(e) {
      WDS.log.error(&quot;Remove quantity to products failed:&quot;, e);
    }
}

function navigateBack() {
    try {
        WDS.browser.navigate().back();    
        WDS.log.info(&quot;Navigate back&quot;);
        java.lang.Thread.sleep(defaultSleepTime*2);
    } catch(e) {
        WDS.log.error(&quot;Navigate back failed:&quot;, e); 
    }
}

function userFlow() {    
    
	java.lang.Thread.sleep(defaultSleepTime*5); 
	closeInstagramModal();
	
	java.lang.Thread.sleep(defaultSleepTime*5); 
    goToRandomProductPage();

	java.lang.Thread.sleep(defaultSleepTime*5); 
    addToCart();
	
	java.lang.Thread.sleep(defaultSleepTime*5);
	addRecommendationToCart();
     
    java.lang.Thread.sleep(defaultSleepTime*5);
    
	goToCheckoutPage();
    java.lang.Thread.sleep(defaultSleepTime*7);
    
	removeQuantityRandomCheckoutPage();
	java.lang.Thread.sleep(defaultSleepTime*5); 
	
	goToRandomPage();
}

WDS.sampleResult.sampleStart();

// Login to start page (stage)
try {
	WDS.browser.get(&apos;${Enviroment}&apos;);
	WDS.browser.findElement(pkg.By.name(&quot;auth_code&quot;)).sendKeys(&apos;${Auth_Code}\n&apos;);
} catch(e) {
	WDS.log.error(&quot;Stage login failed:&quot;, e); 
	WDS.sampleResult.setSuccessful(false);
}

// 20% chance server render start page
//if (Math.random() &lt; 0.2) {
//    WDS.browser.get(&apos;${Enviroment}?${Auth_Code}&apos;);
//} else {
//    WDS.browser.get(&apos;${Enviroment}?${Auth_Code}&amp;ssr=off&apos;);
//}

java.lang.Thread.sleep(defaultSleepTime*5); 
try {
 userFlow();   
} catch(e){
    WDS.log.error(&quot;user flow failed:&quot;, e); 
   // java.lang.Thread.sleep(defaultSleepTime* 10);
   // userFlow();
}

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/usr/bin/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
